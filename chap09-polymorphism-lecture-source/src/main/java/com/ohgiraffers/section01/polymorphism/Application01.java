package com.ohgiraffers.section01.polymorphism;

public class Application01 {

    public static void main(String[] args) {

        /* 수업목표. 다형성과 타입 형변환에 대해 이해할 수 있다. */
        /* 필기.
        *   다형성
        *   다형성이란 하나의 인스턴스가 여러 가지 타입을 가질 수 있는 것을 말한다.
        *   그렇기 때문에 하나의 타입으로 여러 타입의 인스턴스를 처리할 수 있기도 하고,
        *   하나의 메소드 호출로 객체별로 각기 다른 방법으로 동작할 수 도 있다.
        *  */

        /* 필기.
        *   다형성이란, 객체지향 프로그래밍의 3대 특징(캡슐화, 상속, 다형성) 중 하나이며,
        *   객체지향 프로그래밍의 꽃이라고 불리울 정도로 활용성이 높고 장점이 많다.
        *  */

        /* 필기.
        *   다형성의 장점
        *   1. 여러 타입의 객체를 하나의 타입으로 관리할 수 있기 때문에 유지보수성과 생산성이 증가
        *   2. 상속을 기반으로 한 기술이기 때문에 상속관계(연관)에 있는 객체는 동일한 메세지(메소드)를
        *      수신할 수 있다.
        *      이러한 동일한 메세지를 수신 받아 처리하는 내용을 객체별로 다르게 할 수 있다는 장점.
        *      하나의 호출로 여러 가지 동작을 수행할 수 있다는 측면에서 오버로딩도 다형성으로 보기도 한다.
        *   3. 확장성이 좋은 코드를 작성할 수 있다.
        *   4. 결합도를 낮춰 유지보수성을 증가시킬 수 있다.
        *  */

        /* 목차. 1. 동물, 토끼, 호랑이 클래스 사용 */

        /* 목차. 2. 동물 인스턴스 생성 후 메소드 호출 확인 */
        System.out.println("==========동물 생성==========");
        동물 animal = new 동물();
        animal.먹기();
        animal.달리기();
        animal.울기();

        /* 목차. 3. 토끼 인스턴스 생성 후 메소드 호출 확인 */
        System.out.println("==========토끼 생성==========");
        토끼 rabbit = new 토끼();
        rabbit.먹기();
        rabbit.달리기();
        rabbit.울기();
        rabbit.점프();        // 토끼는 부모의 메소드 뿐 아니라 본인의 메소드도 가졌다.

        /* 목차. 4. 호랑이 인스턴스 생성 후 메소드 호출 확인 */
        System.out.println("==========호랑이 생성==========");
        호랑이 tiger = new 호랑이();
        tiger.먹기();
        tiger.달리기();
        tiger.울기();
        tiger.물어뜯기();


        /* 필기.
        *   토끼랑 호랑이는 동물 클래스를 상속 받았다.
        *   따라서 토끼는 토끼 타입이기도 하면서 동물 타입이다.
        *   호랑이도 마찬가지로 호랑이 타입이기도 하면서 동물 타입이다.
        *  */

        /* 목차. 5. 부모 타입(동물) 으로 자식 인스턴스(호랑이, 토끼)) 주소값 저장 */

        동물 a1 = new 토끼();
        동물 a2 = new 호랑이();

    }

}
